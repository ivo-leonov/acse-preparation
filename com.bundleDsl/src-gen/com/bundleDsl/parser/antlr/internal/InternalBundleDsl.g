/*
 * generated by Xtext
 */
grammar InternalBundleDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.bundleDsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.bundleDsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.bundleDsl.services.BundleDslGrammarAccess;

}

@parser::members {

 	private BundleDslGrammarAccess grammarAccess;
 	
    public InternalBundleDslParser(TokenStream input, BundleDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected BundleDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getBundleBundleParserRuleCall_0()); 
	    }
		lv_bundle_0_0=ruleBundle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"bundle",
        		lv_bundle_0_0, 
        		"Bundle");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBundle
entryRuleBundle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBundleRule()); }
	 iv_ruleBundle=ruleBundle 
	 { $current=$iv_ruleBundle.current; } 
	 EOF 
;

// Rule Bundle
ruleBundle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Bundle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBundleAccess().getBundleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBundleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBundleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBundleAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBundleAccess().getCarsCarParserRuleCall_3_0()); 
	    }
		lv_cars_3_0=ruleCar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBundleRule());
	        }
       		add(
       			$current, 
       			"cars",
        		lv_cars_3_0, 
        		"Car");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getBundleAccess().getServicesServiceParserRuleCall_4_0()); 
	    }
		lv_services_4_0=ruleService		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBundleRule());
	        }
       		add(
       			$current, 
       			"services",
        		lv_services_4_0, 
        		"Service");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBundleAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleCar
entryRuleCar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCarRule()); }
	 iv_ruleCar=ruleCar 
	 { $current=$iv_ruleCar.current; } 
	 EOF 
;

// Rule Car
ruleCar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Car' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCarAccess().getCarKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCarAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCarAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3='type' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCarAccess().getTypeKeyword_3());
    }
(
(
		lv_type_4_0=RULE_STRING
		{
			newLeafNode(lv_type_4_0, grammarAccess.getCarAccess().getTypeSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"STRING");
	    }

)
)(
(
		lv_used_5_0=	'used' 
    {
        newLeafNode(lv_used_5_0, grammarAccess.getCarAccess().getUsedUsedKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCarRule());
	        }
       		setWithLastConsumed($current, "used", true, "used");
	    }

)
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCarAccess().getRightParenthesisKeyword_6());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCarAccess().getLeftCurlyBracketKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCarAccess().getExtrasExtraParserRuleCall_8_0()); 
	    }
		lv_extras_8_0=ruleExtra		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCarRule());
	        }
       		add(
       			$current, 
       			"extras",
        		lv_extras_8_0, 
        		"Extra");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCarAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleExtra
entryRuleExtra returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtraRule()); }
	 iv_ruleExtra=ruleExtra 
	 { $current=$iv_ruleExtra.current; } 
	 EOF 
;

// Rule Extra
ruleExtra returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getExtraAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExtraRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExtraAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getExtraAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExtraRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Service' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServiceAccess().getServiceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getServiceAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getForKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getCarExtrasCarExtraParserRuleCall_3_0()); 
	    }
		lv_carExtras_3_0=ruleCarExtra		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"carExtras",
        		lv_carExtras_3_0, 
        		"CarExtra");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleCarExtra
entryRuleCarExtra returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCarExtraRule()); }
	 iv_ruleCarExtra=ruleCarExtra 
	 { $current=$iv_ruleCarExtra.current; } 
	 EOF 
;

// Rule CarExtra
ruleCarExtra returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCarExtraRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getCarExtraAccess().getCarCarCrossReference_0_0()); 
	}

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCarExtraAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCarExtraRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCarExtraAccess().getExtrasExtraCrossReference_1_1_0()); 
	}

)
)+	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCarExtraAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


