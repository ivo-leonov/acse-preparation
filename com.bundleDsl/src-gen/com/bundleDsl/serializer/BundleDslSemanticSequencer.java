/*
 * generated by Xtext
 */
package com.bundleDsl.serializer;

import com.bundleDsl.bundleDsl.Bundle;
import com.bundleDsl.bundleDsl.BundleDslPackage;
import com.bundleDsl.bundleDsl.Car;
import com.bundleDsl.bundleDsl.CarExtra;
import com.bundleDsl.bundleDsl.Extra;
import com.bundleDsl.bundleDsl.Model;
import com.bundleDsl.bundleDsl.Service;
import com.bundleDsl.services.BundleDslGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BundleDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BundleDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == BundleDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case BundleDslPackage.BUNDLE:
				sequence_Bundle(context, (Bundle) semanticObject); 
				return; 
			case BundleDslPackage.CAR:
				sequence_Car(context, (Car) semanticObject); 
				return; 
			case BundleDslPackage.CAR_EXTRA:
				sequence_CarExtra(context, (CarExtra) semanticObject); 
				return; 
			case BundleDslPackage.EXTRA:
				sequence_Extra(context, (Extra) semanticObject); 
				return; 
			case BundleDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BundleDslPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID cars+=Car+ services+=Service*)
	 */
	protected void sequence_Bundle(EObject context, Bundle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (car=[Car|ID] extras+=[Extra|ID]*)
	 */
	protected void sequence_CarExtra(EObject context, CarExtra semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=STRING used?='used'? extras+=Extra+)
	 */
	protected void sequence_Car(EObject context, Car semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING)
	 */
	protected void sequence_Extra(EObject context, Extra semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BundleDslPackage.Literals.EXTRA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BundleDslPackage.Literals.EXTRA__NAME));
			if(transientValues.isValueTransient(semanticObject, BundleDslPackage.Literals.EXTRA__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BundleDslPackage.Literals.EXTRA__DESCRIPTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExtraAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExtraAccess().getDescriptionSTRINGTerminalRuleCall_2_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     bundle=Bundle
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BundleDslPackage.Literals.MODEL__BUNDLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BundleDslPackage.Literals.MODEL__BUNDLE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getModelAccess().getBundleBundleParserRuleCall_0(), semanticObject.getBundle());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=STRING carExtras+=CarExtra+)
	 */
	protected void sequence_Service(EObject context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
